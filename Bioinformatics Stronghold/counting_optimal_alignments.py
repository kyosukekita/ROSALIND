s="""
YTWDNWTQRQRCMCLMWMHSEPWPQCWGWSAWDPMFEFVACQLALWWHSCHAKQIKYCET
CREIYGDEQWCCQKECNGYWEHDLVRWAENWSTYPWKKYWHEHTSYIQPVCCNQHETNCI
WCWANQIGCCTHKIVYCTPYIMFMVRQERQAEGRSPQHDGHVTEYYFWKYTQQELSWCAW
NIWWVDTWIVDSTDYAWKHVLQAPPQYSRHNDGMVWCKPANWTHYMVRRYRYEKFSKAQA
ATGGFMGDPSRRPMNDKVRKGQRWWSNVEYAGCWQPDFINEKVAAWLTTGLWCNSNQIEK
HNEVVWCRLPYPRGPRHWWEQHSPLGFLCPTIGIGGIHYVACYYFDPLSPGGTCIEISHL
WLWRLVWRSHCAPMAEPVQKKKVVHHHTPFKFMNDRDLGDEGIDRLMNSDLIEINKMGYD
WFVKTEKRISVNYYRRQGKKVIDPHKDLIPRRERWEPLDLISMISWMFVFHYRSSSGSKC
RKFNCHVTCEVQGTCTSPKMPIGLGNDKYYDASLDSHTLRFQFCAQYRTCWARFQVWCCM
TYLMLPKAVILEQRDKLPFCFGYQMDLCSYAFLLYNNPEILCCQEFTTAGTLWLNATVMW
CNGGIEAAWPPCHKPWAFNYLNCLRHNKRYLPWMKFIFVTIDILQCKYMMLGDKQPIEKW
KFVCIEGGILRRHYISNYPNFLMIYDACSWMYMNADSLAVWFPRQPGNNLMPYLANYPNW
IYMWWDIYMPRVSFEPCNVHPAEGKDLVSEMALIKAPNEPNHSLIWKDVACACNSYCKGF
VPTFHQKHHHPNKTRYCCLPQKWIYNICIWPNCQWYMRQVRLFVIYAWKEQKEGERFLDW
D
"""

t="""
YTWDAGKNRPDICTQRQRCMCLMWWHSWSALDPMFEFHACQLMLWWHSNHAKQIKRDCET
CREPSAEMWCCQKNEASAGGCPMDHCEAWPAEWSTYPWRKYWHEHTVMGCMASYIQPVCC
NQHETSGCCTAKCEVGYLKVYCTPYIMFCACFRWRMVSLQNQEYQAEGRHFDFGVRVPAL
DGYNFWKYTQQELSWCAWFIWWQDTWILWADSPEVELQAWTDYDVVLIEVNQAPPQYMVW
PEMCEPANFTIVTHRYVKMQGNGFMGNPFTRACRRPMYDKVRRQMHYGGNRWWSNVEYTM
HGSIGFINEKVATWLTTGLACNSNQIVWCRIPYEMQKAWNGRHWAEQHSPLGFLCPTIGI
GGILYVACYYTDPVSPGGTCIEISHMGIVNWLDRATRIEQRIPLMEGLVWRSHCARMQKK
KVVHHHTPMKFMNDRDLGDMGIDRLMNDLIEINKMGYDWFVKTEKRISVNYYNDMRRQGK
WVIDPHKDLIHRQQERWEPLDLYRSSEGWEIIQNFYKCRKFAMHVTCEVQGTCTLPKMPI
GLGNDKYYDASGWHTLRFQFCCQYRTCWARFQVWCCHWYLMMPKAVILESGRDRSVGCPF
CFGYQIDLCSYAFLLPNGNSYDPEITCDQFVAGTLWLAATVMWCNGGIEAWWHPCFKPWP
AVVDQQAFNYRQWICPTVFACQRHNKRPWMKFIFVTIDILQCKCEAGVIIFTCIISIYDA
CMLARQPGNNDMPYGHANYPNWIYMWWDIYMLHLTVYMTVVSYEPGNVHPAEGRTLVSEM
ALIKAPNIPNHSQINWYSFIKDVVCGIRTMHIMFCNSYCKFFVPIEMRWYFHQKTWQDKD
GFTRYCCYPQKWIYNWCIWPNCQWYMRQVRLIVIYAARIMWHAQFKEQKGCCFCIKKERF
LDWW
"""

def count_align(s,t): 
    s=s.replace('\n','')
    t=t.replace('\n','')  
    
    modulus=(2**27-1)
    
    dp = [[0 for j in range(len(t) + 1)] for i in range(len(s) + 1)]
    dp_count=[[0 for j in range(len(t) + 1)] for i in range(len(s) + 1)]

    for i in range(0,len(s) + 1):
        dp[i][0] = i
        dp_count[i][0]=1
    for j in range(1, len(t) + 1):
        dp[0][j] = j
        dp_count[0][j]=1
        
    for i in range(1, len(s) + 1):
        for j in range(1, len(t) + 1):
            if s[i-1] == t[j-1]:
                cost = 0
            else:
                cost = 1
        
            dp[i][j] = min(dp[i-1][j] + 1, dp[i][j-1] + 1, dp[i-1][j-1] + cost)#insertion, deletion, substitution
        
            minin=[dp[i-1][j] + 1, dp[i][j-1] + 1, dp[i-1][j-1] + cost]
        
            if minin[0]==dp[i][j]:
                dp_count[i][j] +=dp_count[i-1][j]
            if minin[1]== dp[i][j]:
                dp_count[i][j] +=dp_count[i][j-1]
            if minin[2]==dp[i][j]:
                dp_count[i][j] +=dp_count[i-1][j-1]
            
            dp_count[i][j] = dp_count[i][j] % modulus
      
    return dp_count[len(s)][len(t)]

print(count_align(s,t))
